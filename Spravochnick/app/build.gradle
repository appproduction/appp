apply plugin: 'com.android.application'


android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.example.spravochnick.spravochnick"
        minSdkVersion 10
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }


		}
		
		signingConfigs {
        debug {
            storeFile file("keys/debug.keystore")
        }

        myConfig {
            storeFile file("keys/release.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebugBuild false
            signingConfig signingConfigs.myConfig
        }
    }

defaultConfig {
        versionCode Integer.parseInt(System.getenv("VERSION_CODE"))
        packageName System.getenv("PACKAGE_NAME")
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.google.android.gms:play-services-wearable:6.5.87'
	compile project(':mopub-sdk')

}
android.applicationVariants.all { variant ->
    def RequestorName = System.getenv("REQUESTOR_NAME")

    if (variant.zipAlign) {
        def oldFile = variant.outputFile;	
        def newName
        if (variant.buildType.versionNameSuffix) {
            newName = "${RequestorName}-${android.defaultConfig.packageName}-v${android.defaultConfig.versionCode}-${android.defaultConfig.versionName}-${variant.buildType.versionNameSuffix}.apk"
        } else {
            newName = "${RequestorName}-${android.defaultConfig.packageName}-v${versionCode}-${android.defaultConfig.versionName}.apk"
        }
        variant.outputFile = new File(oldFile.parent, newName)
    }

    def oldFile = variant.packageApplication.outputFile;
    def newName
    if (variant.buildType.versionNameSuffix) {
        newName = "${RequestorName}-${android.defaultConfig.packageName}-v${android.defaultConfig.versionCode}-${android.defaultConfig.versionName}-${variant.buildType.versionNameSuffix}-unaligned.apk"
    } else {
        newName = "${RequestorName}-${android.defaultConfig.packageName}-v${versionCode}-${android.defaultConfig.versionName}-unaligned.apk"
    }
    variant.packageApplication.outputFile = new File(oldFile.parent, newName)
}

task('replacePackageName') << {
    String contents = new File('appp\Spravochnick\app\src\main\AndroidManifest.xml').getText('UTF-8')
    contents = contents.replaceAll("T_PACKAGE_NAME", System.getenv("PACKAGE_NAME"))
    new File('appp\Spravochnick\app\src\main\AndroidManifest.xml').write(contents, 'UTF-8')
}
task('replaceAdsExtra') << {
    String TargetFile = "appp\Spravochnick\app\src\main\java\com\example\spravochnick\spravochnick\AdsManager.java"
    String contents = new File(TargetFile).getText('UTF-8')
    contents = contents.replaceAll("A2A_ID", System.getenv("A2A_ID"))
    contents = contents.replaceAll("FLURRY_ID", System.getenv("FLURRY_ID"))
    contents = contents.replaceAll("A2A_START_DELAY", System.getenv("A2A_START_DELAY") ?: "86400")
	contents = contents.replaceAll("A2A_DELAY_BETWEEN", System.getenv("A2A_DELAY_BETWEEN") ?: "180")
    new File(TargetFile).write(contents, 'UTF-8')
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generateReleaseBuildConfig' || task.name == 'generateDebugBuildConfig') {
        task.dependsOn 'replacePackageName'
       
        task.dependsOn 'replaceAdsExtra'
    }
}

